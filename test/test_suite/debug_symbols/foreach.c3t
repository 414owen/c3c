// #target: macos-x64
// #debuginfo: yes
module test;

fn void foo(String[] args)
{
	foreach (a : args)
	{
		int x = a.len;
	}
}

/* #expect: test.ll

define void @test.foo(ptr %0, i64 %1) #0 !dbg !6 {
entry:
  %args = alloca %"char[][]", align 8
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %a = alloca %"char[]", align 8
  %x = alloca i32, align 4
  store ptr %0, ptr %args, align 8
  %ptradd = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %1, ptr %ptradd, align 8
  !24
  !26
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !28
  %2 = load i64, ptr %ptradd1, align 8, !dbg !28
  store i64 %2, ptr %.anon, align 8, !dbg !28
  !26
  store i64 0, ptr %.anon2, align 8, !dbg !28
  br label %loop.cond, !dbg !28

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load i64, ptr %.anon2, align 8, !dbg !28
  %4 = load i64, ptr %.anon, align 8, !dbg !28
  %lt = icmp ult i64 %3, %4, !dbg !28
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !28

loop.body:                                        ; preds = %loop.cond
  !29
  %5 = load ptr, ptr %args, align 8, !dbg !32
  %6 = load i64, ptr %.anon2, align 8, !dbg !32
  %ptroffset = getelementptr inbounds [16 x i8], ptr %5, i64 %6, !dbg !32
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %a, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !32
  !33
  %ptradd3 = getelementptr inbounds i8, ptr %a, i64 8, !dbg !37
  %7 = load i64, ptr %ptradd3, align 8, !dbg !37
  %trunc = trunc i64 %7 to i32, !dbg !37
  store i32 %trunc, ptr %x, align 4, !dbg !37
  %8 = load i64, ptr %.anon2, align 8, !dbg !28
  %addnuw = add nuw i64 %8, 1, !dbg !28
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !28
  br label %loop.cond, !dbg !28

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !28
}

!24 = !DILocalVariable(name: "args", arg: 1, scope: !6, file: !5, line: 3, type: !9)
!25 = !DILocation(line: 3, column: 22, scope: !6)
!26 = !DILocalVariable(name: ".temp", scope: !27, file: !5, line: 5, type: !20, align: 8)
!27 = distinct !DILexicalBlock(scope: !6, file: !5, line: 5, column: 2)
!28 = !DILocation(line: 5, column: 15, scope: !27)
!29 = !DILocalVariable(name: "a", scope: !30, file: !5, line: 5, type: !13, align: 8)
!30 = distinct !DILexicalBlock(scope: !27, file: !5, line: 6, column: 2)
!31 = !DILocation(line: 5, column: 11, scope: !30)
!32 = !DILocation(line: 5, column: 15, scope: !30)
!33 = !DILocalVariable(name: "x", scope: !34, file: !5, line: 7, type: !35, align: 4)
!34 = distinct !DILexicalBlock(scope: !30, file: !5, line: 6, column: 2)
!35 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!36 = !DILocation(line: 7, column: 7, scope: !34)
!37 = !DILocation(line: 7, column: 11, scope: !34)
